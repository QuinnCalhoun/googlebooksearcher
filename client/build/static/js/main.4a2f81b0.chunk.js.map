{"version":3,"sources":["utils/API.js","components/BookShelf.js","components/NavBar.js","pages/Home.js","pages/BookList.js","App.js","registerServiceWorker.js","index.js"],"names":["API","getBooks","rawSearchTerm","queryUrl","replace","axios","get","addBook","bookObj","console","log","book","title","volumeInfo","author","authors","description","image","imageLinks","smallThumbnail","link","canonicalVolumeLink","post","showBooks","findByName","bookTitle","findByID","bookId","deleteBook","delete","BookShelf","props","type","_useState","useState","_useState2","Object","slicedToArray","confirmState","setConfirmState","capitalize_Words","str","txt","charAt","toUpperCase","substr","toLowerCase","react_default","a","createElement","Container","text","style","marginTop","Divider","List","items","results","data","map","item","push","Segment","key","id","Grid","columns","Column","width","Image","src","Item","as","href","target","children","Label","Button","icon","onClick","then","res","status","content","Accordion","panels","_id","lift","alert","NavHeader","searchTerm","setSearchTerm","Menu","stackable","widths","fixed","inverted","height","Link","to","header","Icon","name","size","Input","placeholder","onChange","e","value","margin","action","Home","bookList","setBookList","useEffect","NavBar","bookListArr","components_BookShelf","assign","BookList","bookLifter","App","react_router_dom","react_router","exact","path","pages_Home","pages_BookList","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.4a2f81b0.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst apikey = 'key=AIzaSyA9yAx5yBvtMRTtHW62ao40a1YVxraIxq4'\r\n\r\nexport default {\r\n    getBooks: (rawSearchTerm) => {\r\n        const searchTerm = rawSearchTerm.replace(/ +/g, '+')\r\n        const queryUrl = 'https://www.googleapis.com/books/v1/volumes?q=' + searchTerm + '+' + apikey\r\n        // console.log(queryUrl)\r\n        return axios.get(queryUrl)\r\n\r\n    },\r\n    addBook: (bookObj) => {\r\n        console.log(bookObj)\r\n        let book = {\r\n            title: bookObj.volumeInfo.title,\r\n            author: bookObj.volumeInfo.authors[0],\r\n            description: (bookObj.volumeInfo.description) ?\r\n                bookObj.volumeInfo.description :\r\n                bookObj.volumeInfo.title,\r\n            image: bookObj.volumeInfo.imageLinks.smallThumbnail,\r\n            link: bookObj.volumeInfo.canonicalVolumeLink\r\n        }\r\n        console.log(book)\r\n        return axios.post('/api/books/', book)\r\n    },\r\n    showBooks: () => {\r\n        return axios.get('/api/books')\r\n    },\r\n    findByName: (bookTitle) => {\r\n        return axios.get(`/api/books/` + bookTitle)\r\n    },\r\n    findByID: (bookId) => {\r\n        return axios.get('/api/books/' + bookId)\r\n    },\r\n    deleteBook: (bookId) => {\r\n        return axios.delete('/api/books/' + bookId)\r\n    }\r\n}","import React, { useState } from 'react'\r\nimport { Container, Divider, List, Segment, Button, Label, Accordion, Image, Grid } from 'semantic-ui-react'\r\nimport API from '../utils/API'\r\n\r\nconst BookShelf = (props) => {\r\n    const type = props.type\r\n    const [confirmState, setConfirmState] = useState('')\r\n\r\n    const capitalize_Words = (str) => {\r\n        return str.replace(/\\w\\S*/g, function (txt) { return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase(); });\r\n    }\r\n\r\n    const items = () => {\r\n        let items = [];\r\n        (type === 'finder') ?\r\n            props.results.data.items.map(item =>\r\n                items.push(\r\n                    <Segment key={item.id}>\r\n                        <Grid columns='2'>\r\n                            <Grid.Column width='5'>\r\n                                {(item.volumeInfo.imageLinks) ?\r\n                                    <Image src={item.volumeInfo.imageLinks.smallThumbnail} /> :\r\n                                    null}\r\n                            </Grid.Column>\r\n                            <Grid.Column width='11'>\r\n                                <List.Item\r\n                                    as='a'\r\n                                    href={item.volumeInfo.canonicalVolumeLink}\r\n                                    target='_blank'\r\n                                    children={item.volumeInfo.title +\r\n                                        ' || ' +\r\n                                        'By: ' +\r\n                                        item.volumeInfo.authors}\r\n                                />\r\n                                <Label\r\n                                    as={Button}\r\n                                    icon={(confirmState === item.id) ? 'check' : null}\r\n                                    onClick={() => {\r\n                                        API.addBook(item).then(res => (res.status === 200) ? setConfirmState(item.id) : setConfirmState(false))\r\n                                    }}\r\n                                    content='Add to Reading List' />\r\n                                <Accordion panels={[{ key: item.id, title: 'Description', content: item.volumeInfo.description }]} />\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                    </Segment>)\r\n            ) :\r\n            props.results.data.map(item =>\r\n                items.push(\r\n                    <Segment key={item._id}>\r\n                        <Grid columns='2'>\r\n                            <Grid.Column width='5'>\r\n                                {(item.image) ?\r\n                                    <Image src={item.image} /> :\r\n                                    null}\r\n                            </Grid.Column>\r\n                            <Grid.Column width='11'>\r\n                                <List.Item\r\n                                    as='a'\r\n                                    href={item.link}\r\n                                    target='_blank'\r\n                                    content={\r\n                                        capitalize_Words(item.title) +\r\n                                        ' || ' +\r\n                                        'By: ' +\r\n                                        capitalize_Words(item.author)\r\n                                    }\r\n                                />\r\n                                <Label\r\n                                    as={Button}\r\n                                    onClick={() => {\r\n                                        API.deleteBook(item._id).then(res => {\r\n                                            (res.status === 200) ?\r\n                                                API.showBooks().then(res => props.lift(res)) :\r\n                                                alert('No Book Deleted')\r\n                                        })\r\n                                    }}\r\n                                    content='Remove from List' />\r\n                                <Accordion panels={[{ key: item._id, title: 'Description', content: item.description }]} />\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                    </Segment >)\r\n            )\r\n        return items\r\n    }\r\n    return (\r\n        <Container\r\n            text\r\n            style={{ marginTop: '100px' }}>\r\n\r\n            <Divider />\r\n\r\n            <List\r\n                items={(props.results) ? items() : null} />\r\n\r\n\r\n        </Container>\r\n    )\r\n}\r\nexport default BookShelf","import React, { useState } from 'react'\r\nimport { Container, Menu, Icon, Input } from 'semantic-ui-react'\r\nimport API from '../utils/API'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst NavHeader = (props) => {\r\n\r\n    const [searchTerm, setSearchTerm] = useState('')\r\n\r\n    return (\r\n        <div>\r\n            <Menu stackable widths='5' fixed='top' inverted style={{ height: '79px' }}>\r\n                <Container>\r\n                    <Menu.Item as={Link} to='/' header>\r\n                        <Icon name='book' size='large' />\r\n                        GoogleBookSearcher\r\n                     </Menu.Item>\r\n                    <Menu.Item as={Link} to='/home'>Home</Menu.Item>\r\n                    <Menu.Item as={Link} to='/booklist'>Book List</Menu.Item>\r\n                    <Input\r\n                        placeholder='Title or Author'\r\n                        onChange={(e, target) => setSearchTerm(target.value)}\r\n                        style={{\r\n                            height: '45px',\r\n                            margin: 'auto'\r\n                        }}\r\n                        action={(props.type === 'home') ?\r\n                            {\r\n                                name: 'search',\r\n                                content: 'Search for Books',\r\n                                onClick: () => {\r\n                                    if (searchTerm !== '') {\r\n                                        API.getBooks(searchTerm).then(res => props.lift(res))\r\n                                        console.log('Searching Google Books For: ' + searchTerm)\r\n                                    } else {\r\n                                        alert('You did not search for anything')\r\n                                    }\r\n\r\n\r\n                                }\r\n                            } :\r\n                            {\r\n                                name: 'find',\r\n                                content: 'Find Books In Your List',\r\n                                onClick: () => {\r\n                                    if (searchTerm !== '') {\r\n                                        API.findByName(searchTerm).then(res => console.log(res))\r\n                                        console.log('Searching Your List For: ' + searchTerm)\r\n                                    } else {\r\n                                        alert('You did not search for anything')\r\n                                    }\r\n\r\n\r\n                                }\r\n                            }}\r\n                    />\r\n\r\n\r\n                </Container>\r\n            </Menu>\r\n        </div>\r\n    )\r\n}\r\nexport default NavHeader","import React, { useState, useEffect } from \"react\";\r\nimport { Container } from \"semantic-ui-react\";\r\nimport {BookShelf, NavBar} from '../components/index'\r\nimport API from '../utils/API'\r\n\r\nfunction Home() {\r\n  const [bookList, setBookList] = useState({})\r\n\r\n  const bookLifter = (bookListArr) => {\r\n    setBookList({results: bookListArr})\r\n  }\r\n\r\n  useEffect(() => {\r\n    API.getBooks('Fight Club').then(res => setBookList({results: res}))\r\n}, [])\r\n\r\n  return (\r\n    <Container>\r\n      <NavBar lift={bookLifter} type='home' />\r\n      <BookShelf {...bookList} type='finder' />\r\n    </Container>\r\n    // <div>hello world</div>\r\n  );\r\n}\r\n\r\n\r\nexport default Home;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Container } from \"semantic-ui-react\";\r\nimport { NavBar, BookShelf } from '../components/index'\r\nimport API from '../utils/API'\r\n\r\nfunction BookList() {\r\n    const [bookList, setBookList] = useState({})\r\n\r\n    const bookLifter = (bookListArr) => {\r\n        setBookList({ results: bookListArr })\r\n    }\r\n\r\n    useEffect(() => {\r\n        API.showBooks().then(res => {\r\n            setBookList({results: res})\r\n        })\r\n    }, [])\r\n\r\n    return (\r\n        <Container>\r\n            <NavBar lift={bookLifter} />\r\n            <BookShelf lift={bookLifter} {...bookList} type='shower' />\r\n        </Container>\r\n    )\r\n}\r\nexport default BookList","import React from \"react\";\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom'\nimport {Home, BookList} from './pages/index'\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path={['/', '/home']}>\n          <Home />\n        </Route>\n        <Route exact path='/booklist'>\n          <BookList />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}